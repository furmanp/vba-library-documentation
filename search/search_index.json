{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"General information"},{"location":"pages/FAQ/","text":"How to install library on my computer? To install the library go to GitHub repository and clone it to your local machine. You can either manually download the .zip file or if you have GitHub installed you can clone the repository via the app. This will allow you to update the project once new changes are introduced. Next, go to the MS Excel spreadsheet and import downloaded modules. Save the workbook as PERSONAL.XLSB under C:/Users/User Name/AppData/Microsoft/Excel/XLSTART . This will provide access to your newly imported functions for all spreadsheets in your computer. To activate the library, open VBE in MS Excel and go to Tools/References and select VBAPROJECT unless you named it otherwise. How to update the documentation? To contribute to the documentation and add description of newly developed functions follow steps below. Note for seamless process of updating the documentation you should have programming IDE & GitHub installed on your machine. clone the Library repository on your local machine, navigate to docs/pages/docs and open file you want to update, copy table template from the vba_documentation_template.md in the same catalogue, fill in the table with detailed description to make the function clear and easily understandable to others, once finished, commit your changes to the repository and create a pull request with descriptive message, assign reviewer to check the code and merge changes.","title":"FAQ"},{"location":"pages/FAQ/#how-to-install-library-on-my-computer","text":"To install the library go to GitHub repository and clone it to your local machine. You can either manually download the .zip file or if you have GitHub installed you can clone the repository via the app. This will allow you to update the project once new changes are introduced. Next, go to the MS Excel spreadsheet and import downloaded modules. Save the workbook as PERSONAL.XLSB under C:/Users/User Name/AppData/Microsoft/Excel/XLSTART . This will provide access to your newly imported functions for all spreadsheets in your computer. To activate the library, open VBE in MS Excel and go to Tools/References and select VBAPROJECT unless you named it otherwise.","title":"How to install library on my computer?"},{"location":"pages/FAQ/#how-to-update-the-documentation","text":"To contribute to the documentation and add description of newly developed functions follow steps below. Note for seamless process of updating the documentation you should have programming IDE & GitHub installed on your machine. clone the Library repository on your local machine, navigate to docs/pages/docs and open file you want to update, copy table template from the vba_documentation_template.md in the same catalogue, fill in the table with detailed description to make the function clear and easily understandable to others, once finished, commit your changes to the repository and create a pull request with descriptive message, assign reviewer to check the code and merge changes.","title":"How to update the documentation?"},{"location":"pages/docs/","text":"Getting Started This document consist of list of all modules and methods that have been developed throughout the time to help and improve efficiency of working with MS Excel, Femap, and other software. All the code provided is in Visual Basic for Application. Contents of the file is divided into modules (which are organized in a manner of what they are mainly interacting with), next methods/functions are listed with further explanation and general use purpose. Each section refers to the software methods primarily interact with. Methods have been grouped into categories to simplify navigation throughout the documentation. And so, if user is looking for a methods to manage Materials object within Femap environment go check Femap/Materials section, and so on. All the files can be downloaded form GitHub repository which is linked in the top right corner of this website. How to use MS Excel Copy modules on your hard drive, Create new MS Excel Spreadsheet and enter Visual Basic Editor, Go to File/Import (Ctrl + M) and select downloaded modules, Use imported modules/functions. Warning Keep in mind that certain methods are not entirely independent and use other methods stored in this library. Documentation specifically explains which dependencies are used in the method, so if you want to keep your project compact ensure you copied necessary methods. Femap Open new Femap session, Go to File/Programming, Select \"Open new\" and choose scripts you want to open, Run imported script. Note Femap scripts can be easily embedded into the software. To do so, go to Femap root folder and copy script into api folder. This will make script available under Custom Tools section. Contributors","title":"Getting Started"},{"location":"pages/docs/#getting-started","text":"This document consist of list of all modules and methods that have been developed throughout the time to help and improve efficiency of working with MS Excel, Femap, and other software. All the code provided is in Visual Basic for Application. Contents of the file is divided into modules (which are organized in a manner of what they are mainly interacting with), next methods/functions are listed with further explanation and general use purpose. Each section refers to the software methods primarily interact with. Methods have been grouped into categories to simplify navigation throughout the documentation. And so, if user is looking for a methods to manage Materials object within Femap environment go check Femap/Materials section, and so on. All the files can be downloaded form GitHub repository which is linked in the top right corner of this website.","title":"Getting Started"},{"location":"pages/docs/#how-to-use","text":"","title":"How to use"},{"location":"pages/docs/#ms-excel","text":"Copy modules on your hard drive, Create new MS Excel Spreadsheet and enter Visual Basic Editor, Go to File/Import (Ctrl + M) and select downloaded modules, Use imported modules/functions. Warning Keep in mind that certain methods are not entirely independent and use other methods stored in this library. Documentation specifically explains which dependencies are used in the method, so if you want to keep your project compact ensure you copied necessary methods.","title":"MS Excel"},{"location":"pages/docs/#femap","text":"Open new Femap session, Go to File/Programming, Select \"Open new\" and choose scripts you want to open, Run imported script. Note Femap scripts can be easily embedded into the software. To do so, go to Femap root folder and copy script into api folder. This will make script available under Custom Tools section.","title":"Femap"},{"location":"pages/docs/#contributors","text":"","title":"Contributors"},{"location":"pages/docs/vba_documentation_template/","text":"insert name of the function here insert name of the function here (insert function arguments here, divided with comma) Description: Insert description here Input VARIABLE TYPE variable name \u2003 Argument description Output: VARIABLE TYPE variable name \u2003 Argument description None Return Code: Insert return code description if any, otherwise put \"None\" Remarks/Usage: Insert remarks if any, otherwise put \"None\" Example: Insert example description if any, otherwise put \"None\"","title":"Vba documentation template"},{"location":"pages/docs/vba_documentation_template/#insert-name-of-the-function-here","text":"insert name of the function here (insert function arguments here, divided with comma) Description: Insert description here Input VARIABLE TYPE variable name \u2003 Argument description Output: VARIABLE TYPE variable name \u2003 Argument description None Return Code: Insert return code description if any, otherwise put \"None\" Remarks/Usage: Insert remarks if any, otherwise put \"None\" Example: Insert example description if any, otherwise put \"None\"","title":"insert name of the function here"},{"location":"pages/docs/vba_femap_general/","text":"Femap/General Methods described on this page are used to interact with Siemens Femap from MS Excel environment. Note These methods cannot be directly used in Siemens Femap API environment. Mardkown styled table xls_import_data (ws_main, s_keyword) Description: Method to import data from chosen .xlsx file to main workbook. Data will be imported to sheet that is active while the method is being called. Cell \u201cG2\u201d will have a full directory path of the imported file pasted. Input STRING ws_main \u2003 Name of the worksheet, in the Workbook the data is being imported from. STRING s_keyword Keyword that should indicate top right corner of the data that is to be imported. Output: None Return Code: None Remarks/Usage: It is recommended to use format with preceding dot and a number at the end .data1 to avoid confusion with regularly used expressions. Method supports import of multiple tables, as long as they match the keyword .data1, .data2, .dataN. First occurrence of the keyword does not need to have a number. Method import_data is calling functions xls_look , a_make , a_paste and WorksheetExists from the same module. Example: None HTML styled table xls_import_data (ws_main, s_keyword) Description Method to import data from chosen .xlsx file to main workbook. Data will be imported to sheet that is active while the method is being called. Cell \u201cG2\u201d will have a full directory path of the imported file pasted. Input: STRING ws_main Name of the worksheet, in the Workbook the data is being imported from. STRING s_keyword Keyword that should indicate top right corner of the data that is to be imported. Output: None Return Code: None Remarks/Usage: It is recommended to use format with preceding dot and a number at the end .data1 to avoid confusion with regularly used expressions. Method supports import of multiple tables, as long as they match the keyword .data1, .data2, .dataN. First occurrence of the keyword does not need to have a number. Method import_data is calling functions xls_look, a_make, a_paste and WorksheetExists from the same module. Example: None","title":"General"},{"location":"pages/docs/vba_femap_general/#femapgeneral","text":"Methods described on this page are used to interact with Siemens Femap from MS Excel environment. Note These methods cannot be directly used in Siemens Femap API environment.","title":"Femap/General"},{"location":"pages/docs/vba_femap_general/#mardkown-styled-table","text":"xls_import_data (ws_main, s_keyword) Description: Method to import data from chosen .xlsx file to main workbook. Data will be imported to sheet that is active while the method is being called. Cell \u201cG2\u201d will have a full directory path of the imported file pasted. Input STRING ws_main \u2003 Name of the worksheet, in the Workbook the data is being imported from. STRING s_keyword Keyword that should indicate top right corner of the data that is to be imported. Output: None Return Code: None Remarks/Usage: It is recommended to use format with preceding dot and a number at the end .data1 to avoid confusion with regularly used expressions. Method supports import of multiple tables, as long as they match the keyword .data1, .data2, .dataN. First occurrence of the keyword does not need to have a number. Method import_data is calling functions xls_look , a_make , a_paste and WorksheetExists from the same module. Example: None","title":"Mardkown styled table"},{"location":"pages/docs/vba_femap_general/#html-styled-table","text":"xls_import_data (ws_main, s_keyword) Description Method to import data from chosen .xlsx file to main workbook. Data will be imported to sheet that is active while the method is being called. Cell \u201cG2\u201d will have a full directory path of the imported file pasted. Input: STRING ws_main Name of the worksheet, in the Workbook the data is being imported from. STRING s_keyword Keyword that should indicate top right corner of the data that is to be imported. Output: None Return Code: None Remarks/Usage: It is recommended to use format with preceding dot and a number at the end .data1 to avoid confusion with regularly used expressions. Method supports import of multiple tables, as long as they match the keyword .data1, .data2, .dataN. First occurrence of the keyword does not need to have a number. Method import_data is calling functions xls_look, a_make, a_paste and WorksheetExists from the same module. Example: None","title":"HTML styled table"},{"location":"pages/docs/vba_femap_geometry/","text":"Femap/Geometry femap_xls_draw_points femap_xls_draw_points () Description: Method draws points from defined SET.ID's in a currently open FEMAP session. User is prompted with InputBox and asked to define set.id's he wants to have drawn in FEMAP. Appriopriate Excel data table is required for proper execution (See Remarks/Usage). Input: None Output: None Return Code: None Remarks/Usage: Method is primarily looking for set.id keyword, from which it will build 2D data array. set.nam is obsolete for Femap and serves only to indicate the user what the points are referring to. pnt.id parameter defines unique ID that points will have assigned in Femap. If left empty, first available ID will be assigned to the points. x, y, z stand for coordinates, provided in units defined in Femap session. Method calls in femap_create_points, xls_inputbox, a_base0, a_make, a_tidy , and a_look functions. Example: None femap_create_points femap_create_points (x, y, z, pointID) Description: Method creates points in currently active Femap session. Input: DOUBLE x, y, z Coordinates of the point to be created in Femap. Units should match as defined in Femap. LONG [pointID] \u2002 Unique ID number of the points to be created. If omitted, or 0, femap will assign first available ID number to the point. Output: None Return Code: None Remarks/Usage: Function requires active Femap session. Point ID's if defined has to be unique. Example: None femap_xls_draw_curves femap_xls_draw_curves () Description: Method aggregates data from the spreadsheet and creates curves in currently active Femap session. Appriopriate Excel data table is required for proper execution (See Remarks/Usage). User is prompted with a dialog box to choose whether he wants to draw single/multiple set cset.id or curve cur.id . Input: Input values are read from the data table in spreadsheet. Output: None Return Code: None Remarks/Usage: Method is primarily looking for cset.id or cur.id keyword, from which it will build 2D data array. set.nam & cur.nam are obsolete for Femap and serve only to indicate the user what the curves are referring to. cur.id parameter defines unique ID that curves will have assigned in Femap. If left empty, first available ID will be assigned to the curves. x, y, z stand for coordinates of points that curve will be stretched between, provided in units defined in Femap session. Design of the input table is critical for proper functioning of the method. Method calls in femap_oGeo_draw_line, get_curve_id_dialog, a_base0, a_make, a_tidy, sRange_to_array, a_contains , and a_look functions. Example: None femap_xls_draw_surfs femap_xls_draw_surfs () Description: Method aggregates data from the spreadsheet and creates curves in currently active Femap session. Appriopriate Excel data table is required for proper execution (See Remarks/Usage). User is prompted with a dialog box to choose whether he wants to draw single/multiple set cset.id or curve cur.id . Input: Input values are read from the data table in spreadsheet. Output: None Return Code: None Remarks/Usage: Method is primarily looking for cset.id or cur.id keyword, from which it will build 2D data array. set.nam & cur.nam are obsolete for Femap and serve only to indicate the user what the curves are referring to. cur.id parameter defines unique ID that curves will have assigned in Femap. If left empty, first available ID will be assigned to the curves. x, y, z stand for coordinates of points that curve will be stretched between, provided in units defined in Femap session. Design of the input table is critical for proper functioning of the method. Method calls in femap_oGeo_draw_line, get_curve_id_dialog, a_base0, a_make, a_tidy, sRange_to_array, a_contains , and a_look functions. Example: None","title":"Geometry"},{"location":"pages/docs/vba_femap_geometry/#femapgeometry","text":"","title":"Femap/Geometry"},{"location":"pages/docs/vba_femap_geometry/#femap_xls_draw_points","text":"femap_xls_draw_points () Description: Method draws points from defined SET.ID's in a currently open FEMAP session. User is prompted with InputBox and asked to define set.id's he wants to have drawn in FEMAP. Appriopriate Excel data table is required for proper execution (See Remarks/Usage). Input: None Output: None Return Code: None Remarks/Usage: Method is primarily looking for set.id keyword, from which it will build 2D data array. set.nam is obsolete for Femap and serves only to indicate the user what the points are referring to. pnt.id parameter defines unique ID that points will have assigned in Femap. If left empty, first available ID will be assigned to the points. x, y, z stand for coordinates, provided in units defined in Femap session. Method calls in femap_create_points, xls_inputbox, a_base0, a_make, a_tidy , and a_look functions. Example: None","title":"femap_xls_draw_points"},{"location":"pages/docs/vba_femap_geometry/#femap_create_points","text":"femap_create_points (x, y, z, pointID) Description: Method creates points in currently active Femap session. Input: DOUBLE x, y, z Coordinates of the point to be created in Femap. Units should match as defined in Femap. LONG [pointID] \u2002 Unique ID number of the points to be created. If omitted, or 0, femap will assign first available ID number to the point. Output: None Return Code: None Remarks/Usage: Function requires active Femap session. Point ID's if defined has to be unique. Example: None","title":"femap_create_points"},{"location":"pages/docs/vba_femap_geometry/#femap_xls_draw_curves","text":"femap_xls_draw_curves () Description: Method aggregates data from the spreadsheet and creates curves in currently active Femap session. Appriopriate Excel data table is required for proper execution (See Remarks/Usage). User is prompted with a dialog box to choose whether he wants to draw single/multiple set cset.id or curve cur.id . Input: Input values are read from the data table in spreadsheet. Output: None Return Code: None Remarks/Usage: Method is primarily looking for cset.id or cur.id keyword, from which it will build 2D data array. set.nam & cur.nam are obsolete for Femap and serve only to indicate the user what the curves are referring to. cur.id parameter defines unique ID that curves will have assigned in Femap. If left empty, first available ID will be assigned to the curves. x, y, z stand for coordinates of points that curve will be stretched between, provided in units defined in Femap session. Design of the input table is critical for proper functioning of the method. Method calls in femap_oGeo_draw_line, get_curve_id_dialog, a_base0, a_make, a_tidy, sRange_to_array, a_contains , and a_look functions. Example: None","title":"femap_xls_draw_curves"},{"location":"pages/docs/vba_femap_geometry/#femap_xls_draw_surfs","text":"femap_xls_draw_surfs () Description: Method aggregates data from the spreadsheet and creates curves in currently active Femap session. Appriopriate Excel data table is required for proper execution (See Remarks/Usage). User is prompted with a dialog box to choose whether he wants to draw single/multiple set cset.id or curve cur.id . Input: Input values are read from the data table in spreadsheet. Output: None Return Code: None Remarks/Usage: Method is primarily looking for cset.id or cur.id keyword, from which it will build 2D data array. set.nam & cur.nam are obsolete for Femap and serve only to indicate the user what the curves are referring to. cur.id parameter defines unique ID that curves will have assigned in Femap. If left empty, first available ID will be assigned to the curves. x, y, z stand for coordinates of points that curve will be stretched between, provided in units defined in Femap session. Design of the input table is critical for proper functioning of the method. Method calls in femap_oGeo_draw_line, get_curve_id_dialog, a_base0, a_make, a_tidy, sRange_to_array, a_contains , and a_look functions. Example: None","title":"femap_xls_draw_surfs"},{"location":"pages/docs/vba_femap_materials/","text":"Femap/Materials Lorem Ipsum \"Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...\" \"There is no one who loves pain itself, who seeks after it and wants to have it, simply because it is pain...\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eget hendrerit mauris. Fusce interdum efficitur diam vitae dignissim. Praesent nec congue nulla. Fusce fringilla, sem id efficitur luctus, arcu tortor condimentum nibh, id tincidunt elit neque ac turpis. Sed ipsum quam, sodales ut ultricies sit amet, dictum ac nibh. Donec sollicitudin justo eu tempor laoreet. Nunc ut elit nec nibh pulvinar hendrerit ut non arcu. Phasellus ultricies sit amet odio a elementum. Sed ultricies quam eu varius mollis. Integer mi ante, venenatis id nunc at, aliquam gravida erat. Vestibulum vel lectus gravida, vehicula quam at, laoreet velit. Duis quis ipsum id neque feugiat vehicula eu eget enim. Nam quis turpis ligula. In leo tellus, tempus sed porttitor sit amet, sagittis id ex. Curabitur et mollis sapien, ac sagittis neque. Maecenas et fringilla lorem. Maecenas tincidunt nunc eu lorem pulvinar tempor. Curabitur nec dapibus libero. Proin consequat congue neque vel vestibulum. Suspendisse potenti. Phasellus condimentum dictum efficitur. Donec non pharetra dui. Quisque elementum ipsum a quam dignissim commodo. Vivamus vel odio rutrum, vehicula elit ut, vehicula eros. Phasellus et porttitor purus. Ut in condimentum neque. Fusce viverra ante vel orci accumsan cursus. Mauris nulla lacus, efficitur eu augue id, viverra posuere diam. Donec luctus facilisis viverra. Nam vitae fermentum erat. Vivamus iaculis facilisis massa, ut finibus nisi sodales quis. Morbi eu tincidunt odio. Fusce et elementum ante. Donec accumsan metus sit amet tellus viverra auctor. Aenean nulla diam, porttitor vitae metus quis, malesuada dignissim erat. Mauris maximus vulputate leo et eleifend. Vivamus ante lacus, finibus ut nisi a, dignissim facilisis tortor. Nulla placerat neque id libero ultricies volutpat. Praesent molestie, enim a fermentum facilisis, est ipsum dictum quam, id ultrices quam nisl sed arcu. Phasellus quis dictum dolor. Proin aliquet convallis urna, nec luctus purus maximus non. Aliquam ornare, felis sit amet ullamcorper consectetur, neque dolor auctor leo, id ornare eros sapien hendrerit dui. Proin pulvinar magna a arcu consequat aliquet. Quisque sollicitudin aliquet risus in fermentum. Curabitur odio metus, pharetra pretium finibus vitae, porta ac leo. Duis et scelerisque turpis. Etiam in arcu finibus odio euismod tempor. Fusce malesuada faucibus dui id lobortis. Nulla porta odio eu lorem suscipit gravida. Etiam sollicitudin ipsum quis arcu ornare, vitae egestas ligula finibus. Morbi feugiat condimentum libero viverra maximus. Donec rhoncus lorem lorem, aliquam eleifend odio tempor id. Nullam vel pretium ex. Etiam vitae feugiat dolor. Aenean venenatis massa luctus, vulputate ex ut, condimentum turpis.","title":"Materials"},{"location":"pages/docs/vba_femap_materials/#femapmaterials","text":"Lorem Ipsum \"Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...\" \"There is no one who loves pain itself, who seeks after it and wants to have it, simply because it is pain...\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eget hendrerit mauris. Fusce interdum efficitur diam vitae dignissim. Praesent nec congue nulla. Fusce fringilla, sem id efficitur luctus, arcu tortor condimentum nibh, id tincidunt elit neque ac turpis. Sed ipsum quam, sodales ut ultricies sit amet, dictum ac nibh. Donec sollicitudin justo eu tempor laoreet. Nunc ut elit nec nibh pulvinar hendrerit ut non arcu. Phasellus ultricies sit amet odio a elementum. Sed ultricies quam eu varius mollis. Integer mi ante, venenatis id nunc at, aliquam gravida erat. Vestibulum vel lectus gravida, vehicula quam at, laoreet velit. Duis quis ipsum id neque feugiat vehicula eu eget enim. Nam quis turpis ligula. In leo tellus, tempus sed porttitor sit amet, sagittis id ex. Curabitur et mollis sapien, ac sagittis neque. Maecenas et fringilla lorem. Maecenas tincidunt nunc eu lorem pulvinar tempor. Curabitur nec dapibus libero. Proin consequat congue neque vel vestibulum. Suspendisse potenti. Phasellus condimentum dictum efficitur. Donec non pharetra dui. Quisque elementum ipsum a quam dignissim commodo. Vivamus vel odio rutrum, vehicula elit ut, vehicula eros. Phasellus et porttitor purus. Ut in condimentum neque. Fusce viverra ante vel orci accumsan cursus. Mauris nulla lacus, efficitur eu augue id, viverra posuere diam. Donec luctus facilisis viverra. Nam vitae fermentum erat. Vivamus iaculis facilisis massa, ut finibus nisi sodales quis. Morbi eu tincidunt odio. Fusce et elementum ante. Donec accumsan metus sit amet tellus viverra auctor. Aenean nulla diam, porttitor vitae metus quis, malesuada dignissim erat. Mauris maximus vulputate leo et eleifend. Vivamus ante lacus, finibus ut nisi a, dignissim facilisis tortor. Nulla placerat neque id libero ultricies volutpat. Praesent molestie, enim a fermentum facilisis, est ipsum dictum quam, id ultrices quam nisl sed arcu. Phasellus quis dictum dolor. Proin aliquet convallis urna, nec luctus purus maximus non. Aliquam ornare, felis sit amet ullamcorper consectetur, neque dolor auctor leo, id ornare eros sapien hendrerit dui. Proin pulvinar magna a arcu consequat aliquet. Quisque sollicitudin aliquet risus in fermentum. Curabitur odio metus, pharetra pretium finibus vitae, porta ac leo. Duis et scelerisque turpis. Etiam in arcu finibus odio euismod tempor. Fusce malesuada faucibus dui id lobortis. Nulla porta odio eu lorem suscipit gravida. Etiam sollicitudin ipsum quis arcu ornare, vitae egestas ligula finibus. Morbi feugiat condimentum libero viverra maximus. Donec rhoncus lorem lorem, aliquam eleifend odio tempor id. Nullam vel pretium ex. Etiam vitae feugiat dolor. Aenean venenatis massa luctus, vulputate ex ut, condimentum turpis.","title":"Femap/Materials"},{"location":"pages/docs/vba_femap_property_en_layups/","text":"Femap/Properties & LAyups Lorem Ipsum \"Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...\" \"There is no one who loves pain itself, who seeks after it and wants to have it, simply because it is pain...\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eget hendrerit mauris. Fusce interdum efficitur diam vitae dignissim. Praesent nec congue nulla. Fusce fringilla, sem id efficitur luctus, arcu tortor condimentum nibh, id tincidunt elit neque ac turpis. Sed ipsum quam, sodales ut ultricies sit amet, dictum ac nibh. Donec sollicitudin justo eu tempor laoreet. Nunc ut elit nec nibh pulvinar hendrerit ut non arcu. Phasellus ultricies sit amet odio a elementum. Sed ultricies quam eu varius mollis. Integer mi ante, venenatis id nunc at, aliquam gravida erat. Vestibulum vel lectus gravida, vehicula quam at, laoreet velit. Duis quis ipsum id neque feugiat vehicula eu eget enim. Nam quis turpis ligula. In leo tellus, tempus sed porttitor sit amet, sagittis id ex. Curabitur et mollis sapien, ac sagittis neque. Maecenas et fringilla lorem. Maecenas tincidunt nunc eu lorem pulvinar tempor. Curabitur nec dapibus libero. Proin consequat congue neque vel vestibulum. Suspendisse potenti. Phasellus condimentum dictum efficitur. Donec non pharetra dui. Quisque elementum ipsum a quam dignissim commodo. Vivamus vel odio rutrum, vehicula elit ut, vehicula eros. Phasellus et porttitor purus. Ut in condimentum neque. Fusce viverra ante vel orci accumsan cursus. Mauris nulla lacus, efficitur eu augue id, viverra posuere diam. Donec luctus facilisis viverra. Nam vitae fermentum erat. Vivamus iaculis facilisis massa, ut finibus nisi sodales quis. Morbi eu tincidunt odio. Fusce et elementum ante. Donec accumsan metus sit amet tellus viverra auctor. Aenean nulla diam, porttitor vitae metus quis, malesuada dignissim erat. Mauris maximus vulputate leo et eleifend. Vivamus ante lacus, finibus ut nisi a, dignissim facilisis tortor. Nulla placerat neque id libero ultricies volutpat. Praesent molestie, enim a fermentum facilisis, est ipsum dictum quam, id ultrices quam nisl sed arcu. Phasellus quis dictum dolor. Proin aliquet convallis urna, nec luctus purus maximus non. Aliquam ornare, felis sit amet ullamcorper consectetur, neque dolor auctor leo, id ornare eros sapien hendrerit dui. Proin pulvinar magna a arcu consequat aliquet. Quisque sollicitudin aliquet risus in fermentum. Curabitur odio metus, pharetra pretium finibus vitae, porta ac leo. Duis et scelerisque turpis. Etiam in arcu finibus odio euismod tempor. Fusce malesuada faucibus dui id lobortis. Nulla porta odio eu lorem suscipit gravida. Etiam sollicitudin ipsum quis arcu ornare, vitae egestas ligula finibus. Morbi feugiat condimentum libero viverra maximus. Donec rhoncus lorem lorem, aliquam eleifend odio tempor id. Nullam vel pretium ex. Etiam vitae feugiat dolor. Aenean venenatis massa luctus, vulputate ex ut, condimentum turpis.","title":"Properties & Layups"},{"location":"pages/docs/vba_femap_property_en_layups/#femapproperties-layups","text":"Lorem Ipsum \"Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...\" \"There is no one who loves pain itself, who seeks after it and wants to have it, simply because it is pain...\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eget hendrerit mauris. Fusce interdum efficitur diam vitae dignissim. Praesent nec congue nulla. Fusce fringilla, sem id efficitur luctus, arcu tortor condimentum nibh, id tincidunt elit neque ac turpis. Sed ipsum quam, sodales ut ultricies sit amet, dictum ac nibh. Donec sollicitudin justo eu tempor laoreet. Nunc ut elit nec nibh pulvinar hendrerit ut non arcu. Phasellus ultricies sit amet odio a elementum. Sed ultricies quam eu varius mollis. Integer mi ante, venenatis id nunc at, aliquam gravida erat. Vestibulum vel lectus gravida, vehicula quam at, laoreet velit. Duis quis ipsum id neque feugiat vehicula eu eget enim. Nam quis turpis ligula. In leo tellus, tempus sed porttitor sit amet, sagittis id ex. Curabitur et mollis sapien, ac sagittis neque. Maecenas et fringilla lorem. Maecenas tincidunt nunc eu lorem pulvinar tempor. Curabitur nec dapibus libero. Proin consequat congue neque vel vestibulum. Suspendisse potenti. Phasellus condimentum dictum efficitur. Donec non pharetra dui. Quisque elementum ipsum a quam dignissim commodo. Vivamus vel odio rutrum, vehicula elit ut, vehicula eros. Phasellus et porttitor purus. Ut in condimentum neque. Fusce viverra ante vel orci accumsan cursus. Mauris nulla lacus, efficitur eu augue id, viverra posuere diam. Donec luctus facilisis viverra. Nam vitae fermentum erat. Vivamus iaculis facilisis massa, ut finibus nisi sodales quis. Morbi eu tincidunt odio. Fusce et elementum ante. Donec accumsan metus sit amet tellus viverra auctor. Aenean nulla diam, porttitor vitae metus quis, malesuada dignissim erat. Mauris maximus vulputate leo et eleifend. Vivamus ante lacus, finibus ut nisi a, dignissim facilisis tortor. Nulla placerat neque id libero ultricies volutpat. Praesent molestie, enim a fermentum facilisis, est ipsum dictum quam, id ultrices quam nisl sed arcu. Phasellus quis dictum dolor. Proin aliquet convallis urna, nec luctus purus maximus non. Aliquam ornare, felis sit amet ullamcorper consectetur, neque dolor auctor leo, id ornare eros sapien hendrerit dui. Proin pulvinar magna a arcu consequat aliquet. Quisque sollicitudin aliquet risus in fermentum. Curabitur odio metus, pharetra pretium finibus vitae, porta ac leo. Duis et scelerisque turpis. Etiam in arcu finibus odio euismod tempor. Fusce malesuada faucibus dui id lobortis. Nulla porta odio eu lorem suscipit gravida. Etiam sollicitudin ipsum quis arcu ornare, vitae egestas ligula finibus. Morbi feugiat condimentum libero viverra maximus. Donec rhoncus lorem lorem, aliquam eleifend odio tempor id. Nullam vel pretium ex. Etiam vitae feugiat dolor. Aenean venenatis massa luctus, vulputate ex ut, condimentum turpis.","title":"Femap/Properties &amp; LAyups"},{"location":"pages/docs/vba_xls_general/","text":"Excel/General Enum vOutput Enumeration type variable listing possible outputs when handling functions that work with worksheet cells. vAddress vValue vWidth vLength xls_import_data xls_import_data (ws_main, s_keyword) Description: Method to import data from chosen .xlsx file to main workbook. Data will be imported to sheet that is active while the method is being called. Cell G2 will have a full directory path of the imported file pasted. Input: STRING ws_main \u2003 Name of the worksheet, in the Workbook the data is being imported from. STRING s_keyword Keyword that should indicate top right corner of the data that is to be imported. Output: None Return Code: None Remarks/Usage: It is recommended to use format with preceding dot and a number at the end .data1 to avoid confusion with regularly used expressions. Method supports import of multiple tables, as long as they match the keyword .data, .data1, .data2, .dataN . First occurrence of the keyword does not need to have a number. Method import_data is calling functions xls_look , a_make , a_paste , a_tidy , and WorksheetExists from the same module. Example: None a_base0 a_base0 (input_arr) Description: Function takes in array indexed from 1 and updates indexing to start from 0. Supports 1 dimensional arrays only. Input: VARIANT input_arr Option Base 1 array to be updated to Option Base 0. Output: VARIANT a_base0 \u2003 Array with indexing starting from 0. No additional output arguments required. Return Code: None Remarks/Usage: None Example: None a_test a_test (input_arr) Description: Subroutine pastes passed array into worksheet called test . If the workbook exists, it replaces current content of the worksheet. If not, routine creates one. Input: VARIANT input_arr Array that is pasted into cell B2, in test Worksheet. Output: None Return Code: None Remarks/Usage: None Example: None a_paste a_paste (input_arr, paste_cell, offset_row, offset_col, wbook) Description: Soubroutine that pastes passed array into passed cell. Input: VARIANT input_arr Array that subroutine will paste into defined cells. STRING paste_cell Destination cell where the data is going to be inserted to. Can be provided in format of absolute address (for example A1 ), or a keyword ( .data ). INTEGER [offset_row, offset_col] Values that define whether the data should be inserted in a found cell (default option), or offset. Default value is 0 (direct location). WORKBOOK [wbook] Allows to look for data in different workbooks to the active one. It will look for in active sheet though. Default value is ThisWorkbook. Output: None Return Code: None Remarks/Usage: Subroutine is calling in xls_look function. Example: None a_look a_look (s_keyword, input_arr, num) Description: Function looks for s_keyword in first row and column of input_arr and returns value defined by num . Input: VARIANT s_keyword Keyword that is to be found in row/column header. VARIANT input_arr Array that the s_keyword is being looked in. INTEGER num \u2003\u2003\u2003\u2002Values [-1, 0, 1, 2, 3... n < Ubound(input_arr)] Output: VARIANT a_paste \u2003\u2002Function returns accordingly: -1; column/row index as INTEGER 0; column/row index with preceding name (col/row) to indicate s_keyword location. 1, 2, 3... n - value that is stored in cell 1, 2, 3... cells below/right to the s_keyword cell. Return Code: None Remarks/Usage: Function is calling in a a_2Dto1D function. Example: None a_make a_make (s_keyword, n_down_start, n_right_start, n_down_end, n_right_end, wbook) Description Function sweeps active worksheet for s_keyword value. Input: STRING s_keyword Keyword that is to be found in row/column header. LONG [n_down_start, n_right_start] Parameters define whether function should start from the s_keyword cell of cell adjacent offset down/right by passed value. Default value equals 0. LONG [n_down_end, n_right_end] Parameters define length/width of created matrix. If omitted, function will take entire table which represents combination of keys Ctrl + Shift + Down Output: VARIANT a_make 2 dimensional matrix of data that was stored in continuous chain of cells to the right and to the bottom of s_keyword cell, unless offsets were specified. Return Code: None Remarks/Usage: None Example: None a_tidy a_tidy () Description: Input: Output: Return Code: None Remarks/Usage: None Example: None isVariantAllocated isVariantAllocated () Description: Input: Output: Return Code: None Remarks/Usage: None Example: None xls_WorksheetExists xls_WorksheetExists (ws_name, wbook) Description: Function checks if worksheet with passed ws_name in declared workbook exists. If no wbook is declared, function will look in workbook that is calling the funcion. Input: STRING ws_name \u2003\u2003\u2002 Name of the worksheet to be checked if exists. WORKBOOK [wbook] Workbook where the function should look for ws_name. Default value is ThisWorkbook . Output: BOOLEAN xls_WorksheetExists Boolean statement. Returns True is Worksheet named ws_name exists, returns False otherwise. Return Code: None Remarks/Usage: None Example: None xls_fast xls_fast (status) Description: Subroutine to slightly improve Worksheets related macro efficiency. It turns off Screen Updating and calculation. It is recommended to set is back on at the end of the script. Input: BOOLEAN [status] Variable to set the function on or off. If omitted, default value is True. Output: None Return Code: None Remarks/Usage: None Example: None array_1Dto2D array_1Dto2D (input_arr) Description: Function converts 1 dimensional array and allocates second dimension for each item. Returns 2 dimensional array. Input: VARIANT input_arr 1 dimensional array that will have second dimension allocated. Output: VARIANT array_1Dto2D 2 dimensional array. Second dimension is 1 element vector. Return Code: None Remarks/Usage: None Example: None xls_inputbox xls_inputbox () Description: Function displays an InputBox asking for user input. User can provide either sinlge values separated with a comma, or provide limits of a range separated with a dash. Inserted data is then converted into an array. Input: No input variables required. User input is passed through an InputBox textfield. Output: VARIANT xls_inputbox 2 dimensional vector of values read from input box. Return Code: None Remarks/Usage: Input: 1, 2, 3, 4, 5 -> Output: array = (1, 2, 3, 4, 5) Input: 1- 10 -> Output: array = (1, 2, 3, 4... , 10) Negative ranges are supported. Example: None xls_look xls_look (s_keyword, output, offset_down, offset_right, wbook) Description: Function sweeps active worksheet for s_keyword value. Returns data dependent on the input choice. Input: STRING s_keyword Keyword that the function is looking for in the active worksheet. vOutput output \u2003\u2003Enumeration variable indicating what function should return. { vValue , vAddress , vLength , vWidth } LONG [offset_down, offset_right] Indicates whether function should return values offset from cell containing s_keyword. If omitted, function will return information about cell containing s_keyword (exact match). WORKBOOK [wbook] Allows to look for data in different workbooks to the active one. It will look for the value in active sheet though. Output: VARIANT xls_look \u2003Returned value depends on value chosen in output variable. Return Code: None Remarks/Usage: None Example: None a_nDim a_nDim (input_arr) Description: Function returns number of dimensions of input_arr that was passed on to the function. Returns a Long variable informing about number of dimensions. Input: VARIANT input_arr Array that number of dimension will be calculated from. Output: LONG a_nDim \u2003\u2003\u2003 Value that represents number of dimensions array has. Return Code: None Remarks/Usage None Example: None a_2Dto1D a_2Dto1D (input_arr, a_vector) Description: Function extracts single dimensional vector from 2 dimensional matrix. Input: VARIANT input_arr 2 dimensional matrix that row or column is to be extracted from. STRING a_vector \u2003 Keyword that indicated which row/column should be extracted from input_arr matrix. Syntax should look as follows: row1, col3. Output: VARIANT a_2Dto1D \u2003 Single dimensional vector. Return Code: None Remarks/Usage: a_vector should indicate whether user wants to extract row or column and point at it's index (base1). For example: row1, col3. Example: None a_len a_len (input_arr) Description: Function returns lenght of the array as Long Input: VARIANT input_arr Array that length will be returned Output: STRING a_len Length of the array (first dimension only). Return Code: None Remarks/Usage: Indexing the array (base0, base1) does not affect the result. To calculate length of array's second dimension rin a_len(arr[1]) . Example: None sRange_to_array sRange_to_array (input_str) Description: User can provide either single numeric values separated with a comma, or provide limits of a range separated with a dash. Inserted data is then converted into an array that function returns. Input: STRING input_str \u2003 String that will be converted into an array. Output: VARIANT sRange_to_array Array of data points that have been separated by comma, or range if dash has been used. None Return Code: None Remarks/Usage: None Example: None a_remove_duplicates a_remove_duplicates (input_arr) Description: Function removes duplicate entities from a 1 dimensional array. Input: VARIANT input_arr \u2003 Array that the duplicates will be removed from. Output: VARIANT a_remove_duplicates Array with removed duplicates. None Return Code: None Remarks/Usage: Function does not overwrite passed array, but returns a new one. Function supports 1 dimensional arrays only. Example: None a_count_occurrence a_count_occurrence (input_arr, item) Description: Function removes duplicate entities from a 1 dimensional array. Input: VARIANT input_arr \u2003 Input array that occurrences will be deleted from. VARIANT item \u2003 Variable that indicates what items should be removed. Output: LONG a_count_occurrence Number of item occurrence in inpur_arr . None Return Code: None Remarks/Usage: Function supports 1 dimensional arrays only. Example: None append append (input_arr, appendee) Description: Function adds variable appendee at the end of input_arr . Input: VARIANT input_arr \u2003 Input array that will be updated with next item. VARIANT appendee \u2003 Variable will be inserted at the end of the input_arr . Output: VARIANT append New array with updated items. None Return Code: None Remarks/Usage: appendee parameter should have the same number of dimensions as input_arr , otherwise function may prompt an error or return unexpected result. Example: None a_contains a_contains (input_arr, item) Description: Function loops through an array to check if item is stored in the vector. Input: VARIANT input_arr \u2003 Input array that will be looped through. VARIANT item \u2003 Variable that is being looked for in the input_arr . Output: BOOLEAN a_contains Function returns TRUE is the item has been found, FALSE if not. None Return Code: None Remarks/Usage: Function will return TRUE and finish iteration after first value that fulfills the condition is met. It will not return any additional information. Function supports only one dimensional arrays. item variable is defined as VARIANT to simplify using the function, user has to parse the type he wants to evaluate by himself. Example: None","title":"General"},{"location":"pages/docs/vba_xls_general/#excelgeneral","text":"","title":"Excel/General"},{"location":"pages/docs/vba_xls_general/#enum-voutput","text":"Enumeration type variable listing possible outputs when handling functions that work with worksheet cells. vAddress vValue vWidth vLength","title":"Enum vOutput"},{"location":"pages/docs/vba_xls_general/#xls_import_data","text":"xls_import_data (ws_main, s_keyword) Description: Method to import data from chosen .xlsx file to main workbook. Data will be imported to sheet that is active while the method is being called. Cell G2 will have a full directory path of the imported file pasted. Input: STRING ws_main \u2003 Name of the worksheet, in the Workbook the data is being imported from. STRING s_keyword Keyword that should indicate top right corner of the data that is to be imported. Output: None Return Code: None Remarks/Usage: It is recommended to use format with preceding dot and a number at the end .data1 to avoid confusion with regularly used expressions. Method supports import of multiple tables, as long as they match the keyword .data, .data1, .data2, .dataN . First occurrence of the keyword does not need to have a number. Method import_data is calling functions xls_look , a_make , a_paste , a_tidy , and WorksheetExists from the same module. Example: None","title":"xls_import_data"},{"location":"pages/docs/vba_xls_general/#a_base0","text":"a_base0 (input_arr) Description: Function takes in array indexed from 1 and updates indexing to start from 0. Supports 1 dimensional arrays only. Input: VARIANT input_arr Option Base 1 array to be updated to Option Base 0. Output: VARIANT a_base0 \u2003 Array with indexing starting from 0. No additional output arguments required. Return Code: None Remarks/Usage: None Example: None","title":"a_base0"},{"location":"pages/docs/vba_xls_general/#a_test","text":"a_test (input_arr) Description: Subroutine pastes passed array into worksheet called test . If the workbook exists, it replaces current content of the worksheet. If not, routine creates one. Input: VARIANT input_arr Array that is pasted into cell B2, in test Worksheet. Output: None Return Code: None Remarks/Usage: None Example: None","title":"a_test"},{"location":"pages/docs/vba_xls_general/#a_paste","text":"a_paste (input_arr, paste_cell, offset_row, offset_col, wbook) Description: Soubroutine that pastes passed array into passed cell. Input: VARIANT input_arr Array that subroutine will paste into defined cells. STRING paste_cell Destination cell where the data is going to be inserted to. Can be provided in format of absolute address (for example A1 ), or a keyword ( .data ). INTEGER [offset_row, offset_col] Values that define whether the data should be inserted in a found cell (default option), or offset. Default value is 0 (direct location). WORKBOOK [wbook] Allows to look for data in different workbooks to the active one. It will look for in active sheet though. Default value is ThisWorkbook. Output: None Return Code: None Remarks/Usage: Subroutine is calling in xls_look function. Example: None","title":"a_paste"},{"location":"pages/docs/vba_xls_general/#a_look","text":"a_look (s_keyword, input_arr, num) Description: Function looks for s_keyword in first row and column of input_arr and returns value defined by num . Input: VARIANT s_keyword Keyword that is to be found in row/column header. VARIANT input_arr Array that the s_keyword is being looked in. INTEGER num \u2003\u2003\u2003\u2002Values [-1, 0, 1, 2, 3... n < Ubound(input_arr)] Output: VARIANT a_paste \u2003\u2002Function returns accordingly: -1; column/row index as INTEGER 0; column/row index with preceding name (col/row) to indicate s_keyword location. 1, 2, 3... n - value that is stored in cell 1, 2, 3... cells below/right to the s_keyword cell. Return Code: None Remarks/Usage: Function is calling in a a_2Dto1D function. Example: None","title":"a_look"},{"location":"pages/docs/vba_xls_general/#a_make","text":"a_make (s_keyword, n_down_start, n_right_start, n_down_end, n_right_end, wbook) Description Function sweeps active worksheet for s_keyword value. Input: STRING s_keyword Keyword that is to be found in row/column header. LONG [n_down_start, n_right_start] Parameters define whether function should start from the s_keyword cell of cell adjacent offset down/right by passed value. Default value equals 0. LONG [n_down_end, n_right_end] Parameters define length/width of created matrix. If omitted, function will take entire table which represents combination of keys Ctrl + Shift + Down Output: VARIANT a_make 2 dimensional matrix of data that was stored in continuous chain of cells to the right and to the bottom of s_keyword cell, unless offsets were specified. Return Code: None Remarks/Usage: None Example: None","title":"a_make"},{"location":"pages/docs/vba_xls_general/#a_tidy","text":"a_tidy () Description: Input: Output: Return Code: None Remarks/Usage: None Example: None","title":"a_tidy"},{"location":"pages/docs/vba_xls_general/#isvariantallocated","text":"isVariantAllocated () Description: Input: Output: Return Code: None Remarks/Usage: None Example: None","title":"isVariantAllocated"},{"location":"pages/docs/vba_xls_general/#xls_worksheetexists","text":"xls_WorksheetExists (ws_name, wbook) Description: Function checks if worksheet with passed ws_name in declared workbook exists. If no wbook is declared, function will look in workbook that is calling the funcion. Input: STRING ws_name \u2003\u2003\u2002 Name of the worksheet to be checked if exists. WORKBOOK [wbook] Workbook where the function should look for ws_name. Default value is ThisWorkbook . Output: BOOLEAN xls_WorksheetExists Boolean statement. Returns True is Worksheet named ws_name exists, returns False otherwise. Return Code: None Remarks/Usage: None Example: None","title":"xls_WorksheetExists"},{"location":"pages/docs/vba_xls_general/#xls_fast","text":"xls_fast (status) Description: Subroutine to slightly improve Worksheets related macro efficiency. It turns off Screen Updating and calculation. It is recommended to set is back on at the end of the script. Input: BOOLEAN [status] Variable to set the function on or off. If omitted, default value is True. Output: None Return Code: None Remarks/Usage: None Example: None","title":"xls_fast"},{"location":"pages/docs/vba_xls_general/#array_1dto2d","text":"array_1Dto2D (input_arr) Description: Function converts 1 dimensional array and allocates second dimension for each item. Returns 2 dimensional array. Input: VARIANT input_arr 1 dimensional array that will have second dimension allocated. Output: VARIANT array_1Dto2D 2 dimensional array. Second dimension is 1 element vector. Return Code: None Remarks/Usage: None Example: None","title":"array_1Dto2D"},{"location":"pages/docs/vba_xls_general/#xls_inputbox","text":"xls_inputbox () Description: Function displays an InputBox asking for user input. User can provide either sinlge values separated with a comma, or provide limits of a range separated with a dash. Inserted data is then converted into an array. Input: No input variables required. User input is passed through an InputBox textfield. Output: VARIANT xls_inputbox 2 dimensional vector of values read from input box. Return Code: None Remarks/Usage: Input: 1, 2, 3, 4, 5 -> Output: array = (1, 2, 3, 4, 5) Input: 1- 10 -> Output: array = (1, 2, 3, 4... , 10) Negative ranges are supported. Example: None","title":"xls_inputbox"},{"location":"pages/docs/vba_xls_general/#xls_look","text":"xls_look (s_keyword, output, offset_down, offset_right, wbook) Description: Function sweeps active worksheet for s_keyword value. Returns data dependent on the input choice. Input: STRING s_keyword Keyword that the function is looking for in the active worksheet. vOutput output \u2003\u2003Enumeration variable indicating what function should return. { vValue , vAddress , vLength , vWidth } LONG [offset_down, offset_right] Indicates whether function should return values offset from cell containing s_keyword. If omitted, function will return information about cell containing s_keyword (exact match). WORKBOOK [wbook] Allows to look for data in different workbooks to the active one. It will look for the value in active sheet though. Output: VARIANT xls_look \u2003Returned value depends on value chosen in output variable. Return Code: None Remarks/Usage: None Example: None","title":"xls_look"},{"location":"pages/docs/vba_xls_general/#a_ndim","text":"a_nDim (input_arr) Description: Function returns number of dimensions of input_arr that was passed on to the function. Returns a Long variable informing about number of dimensions. Input: VARIANT input_arr Array that number of dimension will be calculated from. Output: LONG a_nDim \u2003\u2003\u2003 Value that represents number of dimensions array has. Return Code: None Remarks/Usage None Example: None","title":"a_nDim"},{"location":"pages/docs/vba_xls_general/#a_2dto1d","text":"a_2Dto1D (input_arr, a_vector) Description: Function extracts single dimensional vector from 2 dimensional matrix. Input: VARIANT input_arr 2 dimensional matrix that row or column is to be extracted from. STRING a_vector \u2003 Keyword that indicated which row/column should be extracted from input_arr matrix. Syntax should look as follows: row1, col3. Output: VARIANT a_2Dto1D \u2003 Single dimensional vector. Return Code: None Remarks/Usage: a_vector should indicate whether user wants to extract row or column and point at it's index (base1). For example: row1, col3. Example: None","title":"a_2Dto1D"},{"location":"pages/docs/vba_xls_general/#a_len","text":"a_len (input_arr) Description: Function returns lenght of the array as Long Input: VARIANT input_arr Array that length will be returned Output: STRING a_len Length of the array (first dimension only). Return Code: None Remarks/Usage: Indexing the array (base0, base1) does not affect the result. To calculate length of array's second dimension rin a_len(arr[1]) . Example: None","title":"a_len"},{"location":"pages/docs/vba_xls_general/#srange_to_array","text":"sRange_to_array (input_str) Description: User can provide either single numeric values separated with a comma, or provide limits of a range separated with a dash. Inserted data is then converted into an array that function returns. Input: STRING input_str \u2003 String that will be converted into an array. Output: VARIANT sRange_to_array Array of data points that have been separated by comma, or range if dash has been used. None Return Code: None Remarks/Usage: None Example: None","title":"sRange_to_array"},{"location":"pages/docs/vba_xls_general/#a_remove_duplicates","text":"a_remove_duplicates (input_arr) Description: Function removes duplicate entities from a 1 dimensional array. Input: VARIANT input_arr \u2003 Array that the duplicates will be removed from. Output: VARIANT a_remove_duplicates Array with removed duplicates. None Return Code: None Remarks/Usage: Function does not overwrite passed array, but returns a new one. Function supports 1 dimensional arrays only. Example: None","title":"a_remove_duplicates"},{"location":"pages/docs/vba_xls_general/#a_count_occurrence","text":"a_count_occurrence (input_arr, item) Description: Function removes duplicate entities from a 1 dimensional array. Input: VARIANT input_arr \u2003 Input array that occurrences will be deleted from. VARIANT item \u2003 Variable that indicates what items should be removed. Output: LONG a_count_occurrence Number of item occurrence in inpur_arr . None Return Code: None Remarks/Usage: Function supports 1 dimensional arrays only. Example: None","title":"a_count_occurrence"},{"location":"pages/docs/vba_xls_general/#append","text":"append (input_arr, appendee) Description: Function adds variable appendee at the end of input_arr . Input: VARIANT input_arr \u2003 Input array that will be updated with next item. VARIANT appendee \u2003 Variable will be inserted at the end of the input_arr . Output: VARIANT append New array with updated items. None Return Code: None Remarks/Usage: appendee parameter should have the same number of dimensions as input_arr , otherwise function may prompt an error or return unexpected result. Example: None","title":"append"},{"location":"pages/docs/vba_xls_general/#a_contains","text":"a_contains (input_arr, item) Description: Function loops through an array to check if item is stored in the vector. Input: VARIANT input_arr \u2003 Input array that will be looped through. VARIANT item \u2003 Variable that is being looked for in the input_arr . Output: BOOLEAN a_contains Function returns TRUE is the item has been found, FALSE if not. None Return Code: None Remarks/Usage: Function will return TRUE and finish iteration after first value that fulfills the condition is met. It will not return any additional information. Function supports only one dimensional arrays. item variable is defined as VARIANT to simplify using the function, user has to parse the type he wants to evaluate by himself. Example: None","title":"a_contains"},{"location":"pages/docs/class-files/c_curve/","text":"cCurve cCurve class aims to represent objects that will simplify handling geometrical data. Structure of cCurve mimics the feCurve structure that is used in FEMAP. cCurve object has following properties: LONG ID - value that represents unique identification number of each curve Collection points - collection of cPoint objects which build the single curve. Class is initialized with 0 value for ID and empty collection of points. To initialize the class objects with defined parameters follow example below: Dim point As New cPoint Dim curve As New cCurve point.X = 5 point.Y = 7 point.Z = 14 point.ID = 1 curve.points.Add point curve.ID = 9 Note There is no upper/lower limit in number of cPoint objects that are stored in single cCurve object. Keep that in mind when forwarding the object further to FEM/CAD program as it may prompt an error if cCurve stores only one point, which mathematically is not a curve. Same relates to the upper limit, some programs have cap of 100 points per curve. ExportPoints ExportPoints this.ExportPoints Description: Method converts collection of cPoints of cCurve object that is calling the function and returns a two dimensional array VARIANT/DOUBLE of coordinates Input: cCurve object cCurve objects only have access to this method, no other value is possible. Output: VARIANT object.ExportPoints function does not affect collection that is stored in the cCurve object. Return value has to be assigned to new VARIANT variable. Return Code: None Remarks/Usage: If cCurve object will be empty/will have no points stored, function will return value -1 . Example: Dim curve As New cCurve Dim point As New cPoint Dim a_points As Variant a_points = curve.ExportPoints","title":"cCurve"},{"location":"pages/docs/class-files/c_curve/#ccurve","text":"cCurve class aims to represent objects that will simplify handling geometrical data. Structure of cCurve mimics the feCurve structure that is used in FEMAP. cCurve object has following properties: LONG ID - value that represents unique identification number of each curve Collection points - collection of cPoint objects which build the single curve. Class is initialized with 0 value for ID and empty collection of points. To initialize the class objects with defined parameters follow example below: Dim point As New cPoint Dim curve As New cCurve point.X = 5 point.Y = 7 point.Z = 14 point.ID = 1 curve.points.Add point curve.ID = 9 Note There is no upper/lower limit in number of cPoint objects that are stored in single cCurve object. Keep that in mind when forwarding the object further to FEM/CAD program as it may prompt an error if cCurve stores only one point, which mathematically is not a curve. Same relates to the upper limit, some programs have cap of 100 points per curve.","title":"cCurve"},{"location":"pages/docs/class-files/c_curve/#exportpoints","text":"ExportPoints this.ExportPoints Description: Method converts collection of cPoints of cCurve object that is calling the function and returns a two dimensional array VARIANT/DOUBLE of coordinates Input: cCurve object cCurve objects only have access to this method, no other value is possible. Output: VARIANT object.ExportPoints function does not affect collection that is stored in the cCurve object. Return value has to be assigned to new VARIANT variable. Return Code: None Remarks/Usage: If cCurve object will be empty/will have no points stored, function will return value -1 . Example: Dim curve As New cCurve Dim point As New cPoint Dim a_points As Variant a_points = curve.ExportPoints","title":"ExportPoints"},{"location":"pages/docs/class-files/c_point/","text":"cPoint cPoint class aims to represent objects that will simplify handling geometrical data. Structure of cPoint mimics the points structure that is used in FEMAP. cPoint object has following properties: LONG ID - value that represents unique identification number of each point INTEGER X - value representing X coordinate of the point INTEGER Y - value representing Y coordinate of the point INTEGER Z - value representing Z coordinate of the point Class is initialized with 0 values for all properties. To initialize the class objects with defined parameters follow example below: Dim point As New cPoint point.X = 5 point.Y = 7 point.Z = 14 point.ID = 1","title":"cPoint"},{"location":"pages/docs/class-files/c_point/#cpoint","text":"cPoint class aims to represent objects that will simplify handling geometrical data. Structure of cPoint mimics the points structure that is used in FEMAP. cPoint object has following properties: LONG ID - value that represents unique identification number of each point INTEGER X - value representing X coordinate of the point INTEGER Y - value representing Y coordinate of the point INTEGER Z - value representing Z coordinate of the point Class is initialized with 0 values for all properties. To initialize the class objects with defined parameters follow example below: Dim point As New cPoint point.X = 5 point.Y = 7 point.Z = 14 point.ID = 1","title":"cPoint"},{"location":"pages/docs/class-files/c_surface/","text":"cSurface cSurface class aims to represent objects that will simplify handling geometrical data. Structure of cSurface mimics the feSurface structure that is used in FEMAP. cSurface object has following properties: LONG ID - value that represents unique identification number of each curve Collection curves - collection of cCurve objects which build the single curve. Class is initialized with 0 value for ID and empty collection of points. To initialize the class objects with defined parameters follow example below: Dim point As New cPoint Dim curve As New cCurve Dim surface as New cSurface point.X = 5 point.Y = 7 point.Z = 14 point.ID = 1 curve.points.Add point curve.ID = 9 surface.curves.Add curve surface.ID = 1001 Note There is no upper/lower limit in number of cCurve objects that are stored in single cSurface object. Keep that in mind when forwarding the object further to FEM/CAD program as it may prompt an error if cSurface stores only one curve, which mathematically is not a surface. ExportCurves ExportCurves this.ExportCurves Description: Method converts collection of cCurves of cSurface object that is calling the function and returns a vector of 2 dimensional arrays VARIANT/DOUBLE that stores curves and points coordinates Input: cSurface object cSurface objects only have access to this method, no other value is possible. Output: VARIANT object.ExportCurves function does not affect collection that is stored in the cCurve object. Return value has to be assigned to new VARIANT variable. Return Code: None Remarks/Usage: If cSurface object will be empty/will have no points stored, function will return value -1 . Example: Dim surface As New cSurface Dim a_curves As Variant a_curves = surface.ExportCurves","title":"cSurface"},{"location":"pages/docs/class-files/c_surface/#csurface","text":"cSurface class aims to represent objects that will simplify handling geometrical data. Structure of cSurface mimics the feSurface structure that is used in FEMAP. cSurface object has following properties: LONG ID - value that represents unique identification number of each curve Collection curves - collection of cCurve objects which build the single curve. Class is initialized with 0 value for ID and empty collection of points. To initialize the class objects with defined parameters follow example below: Dim point As New cPoint Dim curve As New cCurve Dim surface as New cSurface point.X = 5 point.Y = 7 point.Z = 14 point.ID = 1 curve.points.Add point curve.ID = 9 surface.curves.Add curve surface.ID = 1001 Note There is no upper/lower limit in number of cCurve objects that are stored in single cSurface object. Keep that in mind when forwarding the object further to FEM/CAD program as it may prompt an error if cSurface stores only one curve, which mathematically is not a surface.","title":"cSurface"},{"location":"pages/docs/class-files/c_surface/#exportcurves","text":"ExportCurves this.ExportCurves Description: Method converts collection of cCurves of cSurface object that is calling the function and returns a vector of 2 dimensional arrays VARIANT/DOUBLE that stores curves and points coordinates Input: cSurface object cSurface objects only have access to this method, no other value is possible. Output: VARIANT object.ExportCurves function does not affect collection that is stored in the cCurve object. Return value has to be assigned to new VARIANT variable. Return Code: None Remarks/Usage: If cSurface object will be empty/will have no points stored, function will return value -1 . Example: Dim surface As New cSurface Dim a_curves As Variant a_curves = surface.ExportCurves","title":"ExportCurves"}]}